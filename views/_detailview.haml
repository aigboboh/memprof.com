%table.info
  - exclude = %w[ code node_code super_name class_name name ivars methods variables hasSubclasses n1 n2 n3 nd_body nd_var nd_cref ]
  - obj.each do |key,val|
    - next if key == 'line' and val == 0
    - next if key == 'super' and val == false
    - unless exclude.include?(key) or (!%w[ string float ].include?(obj['type']) and key == 'data')
      %tr
        %td.key= key == '_id' ? 'address' : key
        - if %w[ file type line node_type ].include?(key) and val
          %td.val
            - w = {key => val}
            - w['file'] = obj['file'] if key == 'line'
            %a{:href => "/panel?subview=detail&where=#{Yajl.dump w}"}
              - if key == 'file'
                = val.split('/').last(4).join('/')
              - else
                = val
        - else
          %td.val
            - if val.is_a?(Array)
              - val.each do |v|
                = show_val v
                %br/
            - else
              = show_val val

  - if obj.has_key?('nd_var')
    %tr.spacer.proc_links
    - %w[ nd_body nd_var nd_cref ].each do |key|
      - next unless obj.has_key?(key)
      %tr
        %td.key= key
        %td.val= show_val obj[key]

  - if obj['type'] == 'node'
    %tr.spacer.node_links
    - %w[ n1 n2 n3 ].each do |key|
      - if obj.has_key?(key)
        %tr
          %td.key= key
          - if obj[key].is_a?(Array)
            %td.val
              == [ #{obj[key].join(', ')} ]
          - else
            %td.val= show_val obj[key]

    - defn = obj['_id'] if obj.has_key?('n2') and %w[ DEFN METHOD CALL FCALL ARRAY LIT ATTRASGN CONST BLOCK NEWLINE ITER IVAR ].include?(obj['node_type'])
    - if defn
      %tr.spacer.code
      %tr
        %td.code{:colspan=>2}
          - sexp = Sexp.from_array(@dump.gen_sexp(defn))
          - begin
            %pre.prettyprint=h Ruby2Ruby.new.process(sexp)
          - rescue
            - Kernel.p $!

  - if metaclass = @db.find_one('ivars.__attached__' => obj['_id']) and metaclass['_id'] != obj['class']
    %tr
      %td.key metaclass
      %td.val= show_val metaclass

  - if obj['type'] == 'class'
    - ancestors = @dump.ancestors_of(obj) and ancestors.any?
    - num = ancestors.size
    %tr
      %td.key ancestors
      %td.val
        - ancestors.each_with_index do |a, i|
          %a{:href => "/panel?subview=detail&where=#{Yajl.dump :super => a['_id']}"}= show_val a['_id']
          %br/

    - instances = @db.find(:class => obj['_id']).count
    %tr
      %td.key instances
      %td.val
        %a{:href => "/panel?subview=detail&where=#{Yajl.dump :class => obj['_id']}"}= instances

    - subclasses = @db.find(:super => obj['_id']).count
    %tr
      %td.key subclasses
      %td.val
        %a{:href => "/panel?subview=detail&where=#{Yajl.dump :super => obj['_id']}"}= subclasses

  - if %w[ scope globals data ].include?(obj['type']) and list = obj['variables'] and list.any?
    %tr.spacer.variables
    - list.each do |key,val|
      %tr
        %td.key= show_val key
        %td.val= show_val val

  - if %w[ hash varmap ].include?(obj['type']) and list = obj['data'] and list.any?
    %tr.spacer.hash_data
    - list.sort_by{|k,v| k}.first(50).each do |key,val|
      %tr
        %td.key= show_val key
        %td.val= show_val val

  - if obj['type'] == 'varmap' and obj['next']
    %tr.spacer.varmap_data
    - o = obj
    - while o['next'] and o = @db.find_one(:_id => o['next'])
      - if o['data']
        - key, val = o['data'].to_a.first
        %tr
          %td.key <a href='/panel?subview=detail&where=#{Yajl.dump :_id => o['_id']}'>#{key}</a>
          %td.val= show_val val

  - if obj['type'] == 'array' and list = obj['data'] and list.any?
    %tr.spacer.array_data
    - list.each_with_index do |val,key|
      %tr
        %td.key= key
        %td.val= show_val val

  - if list = obj['ivars']
    - ivars, rest = list.partition{ |k,v| k =~ /^@\w/ }
    - cvars, rest = rest.partition{ |k,v| k =~ /^@/ }
    - internal, constants = rest.partition{ |k,v| k =~ /^__/ }

    - if internal.any?
      %tr.spacer.internal
      - internal.sort_by{|k,v| k}.each do |key,val|
        %tr
          %td.key= key
          %td.val= show_val val

    - if ivars.any?
      %tr.spacer.ivars
      - ivars.sort_by{|k,v| k}.each do |key,val|
        %tr
          %td.key= key
          %td.val= show_val val

    - if cvars.any?
      %tr.spacer.cvars
      - cvars.sort_by{|k,v| k}.each do |key,val|
        %tr
          %td.key= key
          %td.val= show_val val

    - if constants.any?
      %tr.spacer.constants
      - constants.sort_by{|k,v| k}.each do |key,val|
        %tr
          %td.key= key
          %td.val= show_val val

  - if list = obj['methods']
    %tr.spacer.methods
    - list.sort_by{|k,v| k}.each do |key,val|
      %tr
        %td.key= key
        %td.val= show_val val
