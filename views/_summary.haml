.panel.summary
  .content
    %h2
      = @dump_metadata['name']
      %i{:style=>'font-weight:normal'} by #{@dump_user['username']}
      %abbr.timeago{:title => @dump_metadata['created_at'].iso8601}

    - unless @dump_metadata['status'] == 'imported'
      - if @dump_metadata['status'] == 'pending'
        %h3.centered
          We are currently processing your heap dump.
          %br/
          This usually takes about 5 minutes.
          %br/
          %img.spinner{:src => '/demo/spinner.gif'}

          :javascript
            setTimeout(function(){
              $('a.current:last').click();
            }, 30000)

        %h4.centered
          You are number #{DUMPS.find(:status => 'pending', :_id => {:$lt => @dump_metadata['_id']}).count + 1} in the queue.
      - else
        %h3.centered
          Something went wrong with this heap dump.
          %br/
          %a.facebox{:href => '/contact'} Contact us
          for help.

    - else
      - ruby = @dump.root_object['ivars'].find{ |k,v| k =~ /RUBY_DESCR/ }.last
      - desc = @db.find_one(:_id => ruby)
      - globals = @db.find_one(:_id=>'globals')
      - arg0 = globals['variables'].find{ |k,v| k == ":$0" }
      - if arg0
        - script = @db.find_one(:_id => arg0.last)
      %h3
        - if bin = @db.find_one(:_id=>'lsof:2')
          %a{:href => url_for('detail', :_id=>'lsof:2')} #{bin['fd_name'].split('/').last(3).join('/')}
        - else
          %a{:href => url_for('detail', :_id=>ruby)}= desc['data']
      %ul.list
        - if bin
          %li
            %a{:href => url_for('detail', :_id=>ruby)}= desc['data']
        - if script
          %li
            executing
            %a{:href => url_for('group:type', :file => script['data'])}
              = script['data'].split('/').last(3).join('/')
        - if config = @db.find_one(:type=>'module',:name=>'Config')
          %li
            - vars = @db.find_one(:_id => config['ivars'].find{ |k,v| k =~ /CONFIG/ }.last)
            - keys = @db.distinct(:_id, :type=>'string',:data=>'CFLAGS')
            - cflags = @db.find_one(:_id => vars['data'].find{ |k,v| keys.include?(k) }.last)
            - cflags = @db.find_one(:_id => cflags['shared']) if cflags['shared']
            compiled with
            %a{:href => url_for('detail', :_id => vars['_id'])}= cflags['data']
        - if ps = @db.find_one(:type=>'ps')
          %li
            memory usage is
            %a{:href => url_for('detail', :type=>'ps')} #{ps['rss']} bytes
        - if cwd = @db.find_one(:type=>'lsof',:fd=>'cwd')
          %li
            working directory is
            %a{:href => url_for('detail', :type=>'lsof',:fd=>'cwd')} #{cwd['fd_name'].split('/').last(3).join('/')}
        %li
          %a{:href => url_for('detail', :type=>'file')} #{@db.find(:type=>'file').count} IO objects
          - if fds = @db.find(:type=>'lsof',:fd=>/^\d/).count and fds > 0
            and
            %a{:href => url_for('detail', :type=>'lsof',:fd=>/^\d/)} #{fds} file descriptors
        - if libs = @db.find(:type=>'lsof',:fd_name=>/\.(so|bundle|dylib)$/).count and libs > 0
          %li
            %a{:href => url_for('detail', :type=>'lsof',:fd_name=>/\.(so|bundle|dylib)$/)} #{libs} shared libraries

      %h3
        %a{:href => url_for('detail', {})} #{@db.count} objects
      %ul.list
        %li
          %a{:href => url_for('detail', :_id => 'globals')} #{@db.find_one(:_id=>'globals')['variables'].size} global variables
        %li
          %a{:href => url_for('detail', :_id => @dump.root_object['_id'])} #{@dump.root_object['ivars'].select{|c,v| c =~ /^[A-Z]/ }.size} constants
          inside
          %a{:href => url_for('detail', :_id => @dump.root_object['_id'])} Object
        - if finalizers = @db.find_one(:_id => 'finalizers')
          %li
            %a{:href => url_for('detail', :_id => 'finalizers')} #{finalizers['data'].size} finalizers
        %li
          %a{:href => url_for('group:age')} objects grouped by age
        %li
          %a{:href => url_for('group:type')} objects grouped by type
        %li
          %a{:href => url_for('group:refs')} objects with most outbound references

      %h3
        %a{:href => url_for('detail', :type=>'class')} #{@db.find(:type=>'class').count} classes
        and
        %a{:href => url_for('detail', :type=>'module')} #{@db.find(:type=>'module').count} modules
      %ul.list
        %li
          %a{:href => url_for('namespace')} namespace hierarchy
        %li
          %a{:href => url_for('subclasses')} class hierarchy
        %li
          %a{:href => url_for('group:class', :class=>{:$exists=>true})} instances per class
        %li
          %a{:href => url_for('group:name', :type=>'class')} duplicate classes by name

      %h3
        - unless files = @dump_metadata['files']
          - files = @db.distinct(:file).compact
          - DUMPS.update({:_id => @dump_metadata['_id']}, :$set => {:files => files})
        %a{:href => url_for('group:file')} #{files.size} source files
      %ul.list
        %li
          %a{:href => url_for('detail', :file=>'(eval)')} #{@db.find(:file=>'(eval)').count} objects created inside eval
        %li
          %a{:href => url_for('detail', :file=>{:$exists=>false})} #{@db.find(:file=>{:$exists=>false}).count} objects missing file information

      %h3
        %a{:href => url_for('detail', :type=>'node')} #{@db.find(:type=>'node').count} nodes
      %ul.list
        %li
          %a{:href => url_for('group:node_type', :type=>'node')} nodes by type
        %li
          %a{:href => url_for('group:file', :type=>'node')} nodes per file

      %h3
        %a{:href => url_for('detail', :type=>'node',:node_type=>'METHOD')} #{@db.find(:type=>'node',:node_type=>'METHOD').count} methods
      %ul.list
        %li
          %a{:href => url_for('group:file', :type=>'node',:node_type=>'METHOD')} methods per file

      %h3
        %a{:href => url_for('detail', :type=>'array')} #{@db.find(:type=>'array').count} arrays
      %ul.list
        - if array = @db.find_one(:type=>'class',:name=>'Array') and n_sub = @db.find(:super=>array['_id']).count
          %li
            %a{:href => url_for('subclasses', :name=>'Array')} #{n_sub} subclasses
            of
            %a{:href => url_for('detail', :_id=>array['_id'])} Array
        - if largest = @db.find({:type=>'array'}, :fields => [:_id, :length]).sort([:length,:desc]).limit(1).first
          %li
            %a{:href => url_for('detail', :_id => largest['_id'])} largest array
            has #{largest['length']} elements
        %li
          %a{:href => url_for('group:length', :type=>'array')} group by size

      %h3
        %a{:href => url_for('detail', :type=>'hash')} #{@db.find(:type=>'hash').count} hashes
      %ul.list
        - if hash = @db.find_one(:type=>'class',:name=>'Hash') and n_sub = @db.find(:super=>hash['_id']).count
          %li
            %a{:href => url_for('subclasses', :name=>'Hash')} #{n_sub} subclasses
            of
            %a{:href => url_for('detail', :_id=>hash['_id'])} Hash
        - if largest = @db.find({:type=>'hash'}, :fields => [:_id, :length]).sort([:length,:desc]).limit(1).first
          %li
            %a{:href => url_for('detail', :_id => largest['_id'])} largest hash
            has #{largest['length']} elements
        %li
          %a{:href => url_for('group:length', :type=>'hash')} group by size

      %h3
        %a{:href => url_for('detail', :type=>'string')} #{@db.find(:type=>'string').count} strings
      %ul.list
        - if str = @db.find_one(:type=>'class',:name=>'String') and n_sub = @db.find(:super=>str['_id']).count
          %li
            %a{:href => url_for('subclasses', :name=>'String')} #{n_sub} subclasses
            of
            %a{:href => url_for('detail', :_id=>str['_id'])} String
        - if largest = @db.find({:type=>'string'}, :fields => [:_id, :length]).sort([:length,:desc]).limit(1).first
          %li
            %a{:href => url_for('detail', :_id => largest['_id'])} longest string
            is #{largest['length']} bytes
        %li
          %a{:href => url_for('group:length', :type=>'string')} group by length

      %h3
        %a{:href => url_for('detail', :class_name=>'Proc')} #{@db.find(:class_name=>'Proc').count} procs
      %ul.list
        %li
          %a{:href => url_for('group:nd_body', :type=>'data',:class_name=>'Proc')} group by location
        %li
          %a{:href => url_for('detail', :type=>'varmap')} #{@db.find(:type=>'varmap').count} variable maps

      %h3
        %a{:href => url_for('detail', :class_name=>'Thread')} #{@db.find(:class_name=>'Thread').count} threads
      %ul.list
        %li
          %a{:href => url_for('detail', :class_name=>'Thread',:main=>true)} main thread
          has #{@db.find_one(:class_name=>'Thread',:main=>true)['variables'].size rescue 0} thread variables
        %li
          %a{:href => url_for('detail', :type=>'frame')} #{@db.find(:type=>'frame').count} stack frames
        %li
          %a{:href => url_for('detail', :type=>'scope')} #{@db.find(:type=>'scope').count} scopes
